{
  "cpp snippets": {
    "prefix": "Sakib",
    "body": [
      "/*",
      "",
      "string author;",
      "author = Hafiz_Sakib;",
      "",
      "*/",
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "#define endl \"\\n\"",
      "#define ll long long int",
      "#define vi vector<ll>",
      "#define yes cout<<\"YES\\n\"",
      "#define no cout<<\"NO\\n\"",
      "#define ignore cin.ignore(numeric_limits<streamsize>::max(),'\\n')",
      "#define Boost ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)",
      "",
      "#define debug(x) cerr<<x<<endl;",
      "#define here fprintf(stderr, \"====I am Here====\\n\");",
      "",
      "",
      "void Boom()",
      "{",
      "$1",
      "}",
      "",
      "",
      "int main()",
      "{",
      "    Boost;",
      "",
      "    int t=1;",
      "    cin>>t;",
      "    while(t--)",
      "    {",
      "Boom();",
      "",
      "    }",
      "",
      "    return 0;",
      "",
      "}",
      ""
    ],
    "description": "to produce the main snippet for cpp"
  },
  "Foreach Loop": {
    "prefix": "foreach",
    "body": ["for(auto u : $1){", " ", "}"],
    "description": "to produce the foreach snippet for cpp"
  },
  "isprime": {
    "prefix": "isprime",
    "body": [
      "bool isPrime(int n)",
      "{",
      "    if (n <= 1)",
      "        return false;",
      "    if (n <= 3)",
      "        return true;",
      "    if (n % 2 == 0 || n % 3 == 0)",
      "        return false;",
      "    for (int i = 5; i * i <= n; i = i + 6)",
      "        if (n % i == 0 || n % (i + 2) == 0)",
      "            return false;",
      "  ",
      "    return true;",
      "}"
    ],
    "description": "isprime"
  },
  "SieveOfEratosthenes": {
    "prefix": "sieve",
    "body": [
      "",
      "bitset<mx> is_prime;",
      "vector<int> primes;",
      "",
      "void sieve(int n)",
      "{",
      "    for (int i = 3; i <= n; i += 2)",
      "    {",
      "        is_prime[i] = 1;",
      "    }",
      "",
      "    for (int i = 3; (i * i) <= n; i += 2)",
      "    {",
      "        if (is_prime[i])",
      "        {",
      "            for (int j = (i * i); j <= n; j += (i + i))",
      "            {",
      "                is_prime[j] = 0;",
      "            }",
      "        }",
      "    }",
      "",
      "    is_prime[1] = 0;",
      "    is_prime[2] = 1;",
      "    primes.push_back(2);",
      "",
      "    for (int i = 3; i <= n; i += 2)",
      "    {",
      "        if (is_prime[i])",
      "        {",
      "            primes.push_back(i);",
      "        }",
      "    }",
      "}",
      ""
    ],
    "description": ""
  },
  "primefactorization": {
    "prefix": "primefactorization",
    "body": [
      "vector<ll> PrimeFactors;",
      "",
      "void PrimeFactorization(ll n)",
      "{",
      "    PrimeFactors.clear();",
      "    // Call sieve function first for access primes till n",
      "    for (auto p : primes)",
      "    {",
      "        if (1LL * p * p > n)",
      "        {",
      "            break;",
      "        }",
      "        else if (n % p == 0)",
      "        {",
      "            while (n % p == 0)",
      "            {",
      "                PrimeFactors.push_back(p);",
      "                n /= p;",
      "            }",
      "        }",
      "    }",
      "    if (n > 1)",
      "    {",
      "        PrimeFactors.push_back(n);",
      "    }",
      "}"
    ],
    "description": "primefector"
  },
  "Binary Search": {
    "prefix": "binarysrc",
    "body": [
      "int binarysrc(vector<int> v, int q)",
      "{",
      "    int first = 0;",
      "    int last = v.size() - 1;",
      "",
      "    while (first <= last)",
      "    {",
      "        int mid = (first + last) / 2;",
      "        if (q == v[mid])",
      "        {",
      "            return mid;",
      "        }",
      "        else if (v[mid] < q)",
      "        {",
      "            first = mid + 1;",
      "        }",
      "        else if (v[mid] > q)",
      "        {",
      "            last = mid - 1;",
      "        }",
      "    }",
      "    return -1;",
      "}",
      ""
    ],
    "description": "Binary Search"
  },
  "Upper Bound": {
    "prefix": "upperbound",
    "body": [
      "int upperbound(vector<int> v, int q)",
      "{",
      "    int l = 0, r = v.size() - 1, ans = v.size();",
      "    while (l <= r)",
      "    {",
      "        int mid = (l + r) >> 1;",
      "        if (v[mid] <= q)",
      "        {",
      "            l = mid + 1;",
      "        }",
      "        else",
      "        {",
      "            ans = min(ans, mid);",
      "            r = mid - 1;",
      "        }",
      "    }",
      "    return ans;",
      "}",
      ""
    ],
    "description": "Upper Bound"
  },
  "Lower Bound": {
    "prefix": "lowerbound",
    "body": [
      "int lowerbound(vector<int> v, int q)",
      "{",
      "    int l = 0, r = v.size() - 1, ans = v.size();",
      "    while (l <= r)",
      "    {",
      "        int mid = (l + r) >> 1;",
      "        if (v[mid] >= q)",
      "        {",
      "            ans = min(ans, mid);",
      "            r = mid - 1;",
      "        }",
      "        else",
      "        {",
      "            l = mid + 1;",
      "        }",
      "    }",
      "    return ans;",
      "}",
      ""
    ],
    "description": "Lower Bound"
  }
}
